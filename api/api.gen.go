// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// NewUrl defines model for NewUrl.
type NewUrl struct {
	Url string `json:"url"`
}

// Url defines model for Url.
type Url struct {
	Id  string `json:"id"`
	Url string `json:"url"`
}

// AddUrlJSONBody defines parameters for AddUrl.
type AddUrlJSONBody = NewUrl

// AddUrlJSONRequestBody defines body for AddUrl for application/json ContentType.
type AddUrlJSONRequestBody = AddUrlJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /urls)
	AddUrl(ctx echo.Context) error

	// (DELETE /urls/{id})
	DeleteUrl(ctx echo.Context, id string) error

	// (GET /urls/{id})
	FindURLById(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AddUrl converts echo context to params.
func (w *ServerInterfaceWrapper) AddUrl(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddUrl(ctx)
	return err
}

// DeleteUrl converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUrl(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUrl(ctx, id)
	return err
}

// FindURLById converts echo context to params.
func (w *ServerInterfaceWrapper) FindURLById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindURLById(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/urls", wrapper.AddUrl)
	router.DELETE(baseURL+"/urls/:id", wrapper.DeleteUrl)
	router.GET(baseURL+"/urls/:id", wrapper.FindURLById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RUTW/bOBD9K8TsHrWS1tmTbvnawkCQFAlyCnxgxJHFQCJZchQ3MPTfiyHlJI6MtAVS",
	"9NCTaHL85s17M7OF2vbOGjQUoNpCqFvsZTyee289H5y3Dj1pjNe1VcjfxvpeElSgDR0tIAN6cph+4ho9",
	"jBn0GIJcx+jpMZDXZg3jmIHHL4P2qKC6S5gv8atnMHv/gDUx1iVubn03pzOky/fxOegQ6IQou+6qgepu",
	"C397bKCCv4oXVYpJkmJiMGZvKWj1fQZaHSCwGjlMm8YygMJQe+1IWwMVHIvb6wsRWusJDXpx/HkpyAqF",
	"vTWBvCQUA4slbCOoRXHl0HDMUV6K4LDWja4lYwltxCcLGXS6RhOiG0b2zOPYybpFschLyJKQ0BK5UBXF",
	"ZrPJZXzOrV8X039DcbE8Pb+8Of9nkZd5Sz3LAaSpYzgmfLMjDBk8og+pmH/zMi851Do00mmo4CheZeAk",
	"tVHFYvBdPDgbaK7HqUdJGIQUBjfPuihWCSKuj9UuFdelFDuVHMBAJ1Y9pdY1hCaCS+e6SaDiIXCGXe/z",
	"6UfagK3bp8j1kxVSKf6wKYGsR3jdCeQHjK0RnGVBOduiLD+M3TvUdjkhvjZy6OjD0qZdcSDxYPCrw5pQ",
	"CdzFjFkyu9hqNSanOySce57u2fM9v8W9DKiENVHj5ZkIAxNHNWuEswiQesFJL3sk9CFO+n6m5RnP0WTg",
	"RIcnE6rYoJDtRkarmZ3ZK43eLoHVzOr/5mVy2pRT/XZvMljjgem7Rhq8YSf29JciaLPu2ISZ9v9ro26v",
	"L06eluqn1G+Q6vYXif+HzdmYQUD/uBM9bfiC9++4Gr8FAAD//2FB2Cv6BwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
